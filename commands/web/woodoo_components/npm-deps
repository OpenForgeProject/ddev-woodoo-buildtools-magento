#!/bin/bash
#ddev-generated - Do not modify this file; your modifications will be overwritten.

# Function to check if npm check prerequisites are met
# Parameters:
#   $1: The theme path
function checkPrequisites() {
    local THEME_PATH=$1

    if [[ ! -d "${THEME_PATH}/web/tailwind" ]]; then
        echo -e "${txtred}${ICON_ERROR} ${THEME_PATH}/web/tailwind does not exist.${txtrst}"
        exit 1
    fi

    cd "${THEME_PATH}/web/tailwind" || exit

    if ! command -v ncu &>/dev/null; then
        echo -e "${txtylw}${ICON_WARNING} npm-check-updates is not installed. Run ${txtcyn}ddev restart${txtylw} to install.${txtrst}"
        exit 1
    fi
}

# Function to update npm dependencies using npm-check-updates
# Parameters:
#   $1: The theme path
function updateNpmDeps() {
    local THEME_PATH=$1

    checkPrequisites "${THEME_PATH}"

    echo -e "${txtcyn}${ICON_ARROW_RIGHT} Updating npm dependencies...${txtrst}"
    ncu -u
    npm install

    echo -e "${txtgrn}${ICON_SUCCESS} npm dependencies updated.${txtrst}"
    cd - >/dev/null || exit
}

# Function to check outdated npm dependencies using npm-check-updates
# Parameters:
#   $1: The theme path
function checkNpmDeps() {
    local THEME_PATH=$1

    checkPrequisites "${THEME_PATH}"

    echo -e "${txtcyn}${ICON_ARROW_RIGHT} Checking outdated npm dependencies...${txtrst}"
    ncu

    echo -e "${txtgrn}${ICON_SUCCESS} npm dependencies check completed.${txtrst}"
    cd - >/dev/null || exit
}

# A command to update npm dependencies for a specific Hyvä theme
if [[ $1 == "hyva-npm-update" && $2 != "" ]]; then
    THEME_TO_UPDATE=$(grep -oP "(?<=${2}: ).*" "${PROJECT_CONFIG_FILE}" | cut -d ' ' -f 1 | tr -d '"')
    checkHyva "${THEME_TO_UPDATE}"
    if [[ ${HYVA} == true ]]; then
        updateNpmDeps "${THEME_TO_UPDATE}"
    else
        echo -e "${txtred}${ICON_ERROR} ${2} is not a Hyvä theme. Please update manually.${txtrst}"
    fi
    exit 0
elif [[ $1 == "hyva-npm-update" && $2 == "" ]]; then
    checkThemePathExists silent
    THEMES_TO_UPDATE=$(gum choose --cursor-prefix "[ ] " --unselected-prefix "[ ] " --selected-prefix "[✓] " --no-limit $THEMES_IN_CONFIG)
    for THEME_CODE in ${THEMES_TO_UPDATE}; do
        THEMES_TO_UPDATE=$(echo $(grep -oP '(?<='$THEME_CODE': ).*' $PROJECT_CONFIG_FILE) | cut -d ' ' -f 1 | sed 's/"//g')
        checkHyva "${THEMES_TO_UPDATE}"
        if [[ ${HYVA} == true ]]; then
            checkNpmDeps "${THEMES_TO_UPDATE}"
        else
            echo -e "${txtred}${ICON_ERROR} ${THEME_CODE} is not a Hyvä theme. Please check manually.${txtrst}"
        fi
    done
fi

# A command to check outdated npm dependencies for a specific Hyvä theme
if [[ $1 == "hyva-npm-check" && $2 != "" ]]; then
    THEME_TO_CHECK=$(grep -oP "(?<=${2}: ).*" "${PROJECT_CONFIG_FILE}" | cut -d ' ' -f 1 | tr -d '"')
    checkHyva "${THEME_TO_CHECK}"
    if [[ ${HYVA} == true ]]; then
        checkNpmDeps "${THEME_TO_CHECK}"
    else
        echo -e "${txtred}${ICON_ERROR} ${2} is not a Hyvä theme. Please check manually.${txtrst}"
    fi
    exit 0
elif [[ $1 == "hyva-npm-check" && $2 == "" ]]; then
    checkThemePathExists silent
    THEMES_TO_CHECK=$(gum choose --cursor-prefix "[ ] " --unselected-prefix "[ ] " --selected-prefix "[✓] " --no-limit $THEMES_IN_CONFIG)
    for THEME_CODE in ${THEMES_TO_CHECK}; do
        THEMES_TO_CHECK=$(echo $(grep -oP '(?<='$THEME_CODE': ).*' $PROJECT_CONFIG_FILE) | cut -d ' ' -f 1 | sed 's/"//g')

        # checks to figure out if it is a Hyvä Theme
        checkHyva "${THEMES_TO_CHECK}"
        if [[ ${HYVA} == true ]]; then
            checkNpmDeps "${THEMES_TO_CHECK}"
        else
            echo -e "${txtred}${ICON_ERROR} ${THEME_CODE} is not a Hyvä theme. Please check manually.${txtrst}"
        fi
    done
fi
