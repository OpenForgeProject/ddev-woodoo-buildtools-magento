#!/bin/bash
#ddev-generated - Do not modify this file; your modifications will be overwritten.

# Generates the Hyvä theme configuration using Magento CLI command.
function hyvaConfigGenerate() {
    echo -e "\n${txtcyn}${ICON_ARROW_RIGHT} Generate Hyvä Configuration ... ${txtrst}"
    "${DDEV_COMPOSER_ROOT}"/bin/magento hyva:config:generate
}

# Executes Magento CLI cache:flush command to clear system cache
function clearCache() {
    if "${DDEV_COMPOSER_ROOT}"/bin/magento cache:flush; then
        echo -e "\n${txtgrn}Cache cleared${txtrst}"
    else
        echo -e "\n${txtred}Failed to clear cache${txtrst}"
        exit 1
    fi
}

# Removes Magento-generated static files and preprocessed view files.
function clearStaticFiles() {
    rm -rf "${DDEV_COMPOSER_ROOT}"/pub/static/* \
           "${DDEV_COMPOSER_ROOT}"/var/view_preprocessed/*
    echo -e "${txtgrn}Magento Static files cleared${txtrst}"
}

# Executes Grunt tasks from project root to compile magento standard themes
function runGruntTasks() {
    "${DDEV_COMPOSER_ROOT}"/node_modules/.bin/grunt clean
    "${DDEV_COMPOSER_ROOT}"/node_modules/.bin/grunt less
}

# Builds a Hyvä theme using provided path and theme code
# Parameters:
#   $1: HYVA_PATH - Path to Hyvä theme directory
#   $2: TEMP_THEME_NAME - Theme code
function getInstalledHyvaVersion() {
    HYVA_VERSION=""
    local TEMP_THEME_NAME=$2

    # Check theme directory for composer.json; fallback to Magento root if not found
    if [[ ! -f "${DDEV_COMPOSER_ROOT}/$1/composer.json" ]]; then
        echo -e "${txtylw}${ICON_WARNING} Could not find composer.json in Theme ($1)"
        echo -e "${txtcyn}${ICON_ARROW_RIGHT} Use composer.json from Magento-Root instead${txtrst}"
        cd "${DDEV_COMPOSER_ROOT}" || exit
        HYVA_VERSION=$(grep -oP '(?<="hyva-themes/magento2-default-theme": ").*' composer.json | cut -d ' ' -f 1 | sed 's/"//g')
    else
        cd "${DDEV_COMPOSER_ROOT}/$1" || exit
        HYVA_VERSION=$(grep -oP '(?<="hyva-themes/magento2-default-theme": ").*' composer.json | cut -d ' ' -f 1 | sed 's/"//g')
    fi

    HYVA_VERSION=$(echo "${HYVA_VERSION}" | sed 's/,//g')
    echo -e "${txtgrn}${ICON_ARROW_RIGHT} ${txtpur}${TEMP_THEME_NAME}${txtcyn} is a Hyvä ${txtpur}${HYVA_VERSION}${txtcyn} Theme${txtrst}\n"
    cd - >/dev/null || exit
}

# Checks if Node.js dependencies require updating by comparing package.json with node_modules
function checkNpmOutdatedPackages() {
    if [[ -d "$1/web/tailwind/node_modules" ]]; then
        cd "$1/web/tailwind" || exit
        echo -e "${txtcyn}${ICON_ARROW_RIGHT} Check for outdated dependencies ... ${txtrst}\n"
        if [[ ! -f package-lock.json ]]; then
            echo -e "${txtylw}${ICON_WARNING} No package-lock.json found. Running npm install ... ${txtrst}\n"
                npm outdated --silent || npm install
        else
            npm outdated --silent || npm ci
        fi
        echo -e "${txtcyn}${ICON_SUCCESS} Dependencies check done.${txtrst}\n"
        cd - >/dev/null || exit
    fi
}

# Check if Node.js dependencies in node_modules are up to date
function checkNodeModules() {
    if [[ ! -d "$1/web/tailwind/node_modules" ]]; then
        echo -e "\n${txtylw}${ICON_WARNING} Install missing npm dependencies (node_modules) ... ${txtrst}"
        cd "$1/web/tailwind" || exit
        if [[ ! -f package-lock.json ]]; then
            npm install
        else
            npm ci
        fi
        if [[ -d "./node_modules" ]]; then
            echo -e "\n${txtcyn}${ICON_SUCCESS} npm dependencies installed.${txtrst}"
            cd - >/dev/null || exit
        else
            echo -e "${txtred}${ICON_ERROR} Could not install npm dependencies. Please check $1/web/tailwind/node_modules ${txtrst}"
            cd - >/dev/null || exit
        fi
    else
        echo -e "${txtcyn}${ICON_SUCCESS} node_modules folder found.${txtrst}"
    fi
}

function installGrunt() {
    npm install
    npx grunt --version
    npx grunt-cli
}

# Checks for Hyva theme presence in build path
# Parameters:
#   $1: Build path
# Sets:
#   HYVA: true if Hyva theme exists, false otherwise
function checkHyva() {
    HYVA=false
    local BUILD_PATH=$1
    local HYVA_FOLDER=${BUILD_PATH}/web/tailwind
    if [[ -d ${HYVA_FOLDER} && -f "${HYVA_FOLDER}/tailwind.config.js" && -f "${HYVA_FOLDER}/package.json" ]]; then
        HYVA=true
    fi
}

# Reads and parses theme configurations from config-themes.yaml and stores
# theme values in THEMES_IN_CONFIG global variable
function readThemesInConfig() {
    THEMES_IN_CONFIG=""
    if [[ ! -f ${PROJECT_CONFIG_FILE} ]]; then
        echo -e "\n${txtred}No ${PROJECT_CONFIG_FILE} found.' first.${txtrst}\n"
        exit 1
    fi
    while read -r line; do
        # Check whether the line with "Themes:" begins
        if [[ ${line} =~ ^themes: ]]; then
            while read -r next_line; do
                # Check whether the next line begins with "-"
                if [[ -n ${next_line} && ${next_line} =~ ^- ]]; then
                    THEMES_IN_CONFIG="${THEMES_IN_CONFIG} $(echo "${next_line}" | cut -d ' ' -f 2 | cut -d ':' -f 1)"
                else
                    break
                fi
            done
        fi
    done <"${PROJECT_CONFIG_FILE}"
}

# Appends theme configuration entries to config-themes.yaml file
function checkThemePathExists() {

    # get all themes from config-themes.yaml
    readThemesInConfig

    local PATH_ERROR=false

    if [[ -z ${THEMES_IN_CONFIG} ]]; then
        echo -e "\n${txtred}No Themes found in ${PROJECT_CONFIG_FILE}${txtrst}\n"
    else
        if [[ $1 != "silent" ]]; then
            # Check if only 1 theme is configured
            if [[ $(countThemesinConfig) == 1 ]]; then
                echo -e "\n${txtgrn}$(countThemesinConfig) Theme added to ${txtcyn}${PROJECT_CONFIG_FILE}${txtrst}\n"
            else
                echo -e "\n${txtgrn}$(countThemesinConfig) Themes added to ${txtcyn}${PROJECT_CONFIG_FILE}${txtrst}\n"
            fi
        fi
        for THEME_CODE in ${THEMES_IN_CONFIG}; do
            while read -r line; do
                # Check whether the line with "Themes:" begins
                if [[ ${line} =~ ^themes: ]]; then
                    while read -r next_line; do
                        THEME_PATHS_VALID=null
                        # Check whether the next line begins with "-"
                        if [[ -n ${next_line} && ${next_line} =~ ^- ]]; then
                            if [[ ${next_line} =~ ${THEME_CODE} ]]; then
                                THEME_PATH=$(echo "${next_line}" | cut -d ' ' -f 3 | cut -d '"' -f 2)

                                if [[ ${THEME_PATH} == "" ]]; then
                                    if [[ $1 != "silent" ]]; then
                                        echo -e "${txtred}${ICON_ERROR} Theme-Path ${txtpur}${THEME_CODE} ${txtred}has not been configured yet.${txtrst}"
                                    fi
                                    THEME_PATHS_VALID=false
                                    PATH_ERROR=true
                                else
                                    # if $THEME_PATHS_VALID not false and registration.php exists in $THEME_PATH
                                    if [[ ${THEME_PATHS_VALID} != false && -f ${THEME_PATH}/registration.php ]]; then
                                        THEME_PATHS_VALID=true
                                        if [[ $1 != "silent" ]]; then
                                            echo -e "${txtgrn}${ICON_SUCCESS} ${txtcyn}Theme ${txtpur}${THEME_CODE} ${txtcyn}is correct.${txtrst}"
                                        fi
                                    else
                                        THEME_PATHS_VALID=false
                                        PATH_ERROR=true
                                        echo -e "${txtred}${ICON_ERROR} Theme-Path ${txtpur}${THEME_CODE} ${txtred}has not been configured correctly.${txtrst}"
                                    fi
                                fi
                            fi
                        fi
                    done
                    break
                fi
            done <"${PROJECT_CONFIG_FILE}"
        done

        # Exit script if any theme paths are invalid
        if ${PATH_ERROR}; then
            echo -e "\n${txtylw}${ICON_WARNING} Some theme paths are invalid! Please check your ${PROJECT_CONFIG_FILE} ${txtrst}\n"
            exit 1
        else
            echo -e "\n${txtgrn}${ICON_SUCCESS} All theme paths are valid!${txtrst}\n"
        fi
    fi
}
